#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

# export PIPELINE_INPUT_RECIPE=
apiVersion: v1
kind: helm-install
meta:
  globalEnvVariable:
    REPLACE_RECIPE: true
    PIPELINE_LOG_DEBUG: false
    PIPELINE_CHECK_DOCKER_STATUS: false
    # env
    DP_CLUSTER_NAME: on-prem
    # domain
    DP_INSTALL_NGINX_INGRESS: ${GUI_DP_INSTALL_NGINX_INGRESS:-"true"}
    DP_INGRESS_NAMESPACE: ingress-system
    DP_DOMAIN: ${GUI_DP_DOMAIN:-"localhost.dataplanes.pro"}
    DP_INSTALL_TRAEFIK_INGRESS: ${GUI_DP_INSTALL_TRAEFIK_INGRESS:-"false"}
    DP_INGRESS_SERVICE_TYPE: NodePort # LoadBalancer
    DP_TLS_CERT: ${GUI_DP_TLS_CERT}
    DP_TLS_KEY: ${GUI_DP_TLS_KEY}
  tools:
    yq: "4.40"
    helm: "3.13"
    kubectl: "1.28"
helmCharts:
- condition: true
  name: cert-manager
  version: v1.13.2 # release: https://github.com/cert-manager/cert-manager/releases
  repo:
    helm:
      url: https://charts.jetstack.io
  values:
    keepPrevious: true
    content: |
      installCRDs: true
      serviceAccount:
        create: true
        name: cert-manager
  cluster:
    names:
      - ${DP_CLUSTER_NAME}
  releaseName: cert-manager
  namespace: cert-manager
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- condition: false
  name: external-dns
  version: 1.13.1
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/external-dns/
  values:
    keepPrevious: true
    content: |
      serviceAccount:
        create: true
        name: external-dns
  cluster:
    names:
      - ${DP_CLUSTER_NAME}
  releaseName: external-dns
  namespace: external-dns-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- condition: true
  name: metrics-server
  version: "3.12.0"
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/metrics-server/
  values:
    keepPrevious: true
    content: |
      clusterName: ${DP_CLUSTER_NAME}
      serviceAccount:
        create: true
        name: metrics-server
      args:
        - "--kubelet-insecure-tls" # https://github.com/docker/for-mac/issues/6274#issuecomment-1259624307
        - "--metric-resolution=90s"
  cluster:
    names:
      - ${DP_CLUSTER_NAME}
  releaseName: metrics-server
  namespace: kube-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- condition: ${DP_INSTALL_TRAEFIK_INGRESS}
  name: traefik
  namespace: ${DP_INGRESS_NAMESPACE}
  version: "26.1.0"
  repo:
    helm:
      url: https://traefik.github.io/charts
  values:
    content: |
      # traefik doc: https://doc.traefik.io/traefik/
      # release: https://github.com/traefik/traefik-helm-chart/releases
      # chart values: https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
      hub: # for hub
        enabled: true
      service: # for external-dns
        annotations:
          external-dns.alpha.kubernetes.io/hostname: dashboard.${DP_DOMAIN}
      ingressRoute: # for dashboard http://dashboard.localhost/dashboard/#/
        dashboard:
          matchRule: Host(`dashboard.${DP_DOMAIN}`) && PathPrefix(`/dashboard`) || Host(`dashboard.${DP_DOMAIN}`) && PathPrefix(`/api`)
          entryPoints:
            - traefik
            - web
            - websecure
      providers: # for external service
        kubernetesIngress:
          allowExternalNameServices: true
      additionalArguments:
        - '--serversTransport.insecureSkipVerify=true'
      tlsStore: # for default certificate
        default:
          defaultCertificate:
            secretName: default-certificate
  cluster:
    names:
      - ${DP_CLUSTER_NAME}
  releaseName: traefik
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: false
      content: |
        kubectl create ns ${DP_INGRESS_NAMESPACE}
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: default-certificate
          namespace: ${DP_INGRESS_NAMESPACE}
        type: Opaque
        data:
          tls.crt: ${DP_TLS_CERT}
          tls.key: ${DP_TLS_KEY}
        EOF
- condition: ${DP_INSTALL_NGINX_INGRESS}
  name: ingress-nginx
  namespace: ${DP_INGRESS_NAMESPACE}
  version: 4.10.0 # release: https://github.com/kubernetes/ingress-nginx/releases
  repo:
    helm:
      url: https://kubernetes.github.io/ingress-nginx
  values:
    keepPrevious: true
    content: |
      # ingress-nginx doc: https://docs.nginx.com/nginx-ingress-controller/
      # ingress-nginx chart values: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
      controller:
        allowSnippetAnnotations: true # https://github.com/kubernetes/ingress-nginx/pull/10393
        hostPort:
          enabled: true # for kind
        service:
          type: ${DP_INGRESS_SERVICE_TYPE} # NodePort for kind, LoadBalancer for others
        ingressClass:
          - nginx
        extraArgs:
          default-ssl-certificate: ${DP_INGRESS_NAMESPACE}/default-certificate
  cluster:
    names:
      - dp-cluster
  releaseName: ingress-nginx
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: false
      content: |
        kubectl create ns ${DP_INGRESS_NAMESPACE}
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: default-certificate
          namespace: ${DP_INGRESS_NAMESPACE}
        type: Opaque
        data:
          tls.crt: ${DP_TLS_CERT}
          tls.key: ${DP_TLS_KEY}
        EOF
