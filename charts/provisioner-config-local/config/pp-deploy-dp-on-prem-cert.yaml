#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

pipelineName: "Deploy Data Plane On-Prem Stack with certificate"
description: |
  This pipeline will deploy supporting tools for on-prem use case with a validate certificate for main ingress
  We will use `localhost.dataplanes.pro` as domain for on-prem use case. This domain will point to `0.0.0.0`. 
  You can get validate public certificate from [Platform Provisioner](https://provisioner.cic2.tibcocloud.com/pipelines/generic-runner?title=certificate-localhost-dp)
  We will have DP service as 
  * `https://kibana.localhost.dataplanes.pro/`
  * `https://flogo.localhost.dataplanes.pro/`
options:
  - name: "GUI_DP_DOMAIN"
    type: string
    guiType: input
    reference: "meta.guiEnv.GUI_DP_DOMAIN"
    description: "We have a special domain for on-prem use case. localhost.dataplanes.pro"
  - name: "GUI_DP_TLS_CERT"
    type: string
    guiType: input
    required: true
    reference: "meta.guiEnv.GUI_DP_TLS_CERT"
    description: "base64 encoding of validate certificate for the domain. You can get it from <a href='https://provisioner.cic2.tibcocloud.com/pipelines/generic-runner?title=certificate-localhost-dp' target='_blank'>Platform Provisioner</a>"
  - name: "GUI_DP_TLS_KEY"
    type: string
    guiType: input
    required: true
    reference: "meta.guiEnv.GUI_DP_TLS_KEY"
    description: "base64 encoding of validate certificate for the domain You can get it from <a href='https://provisioner.cic2.tibcocloud.com/pipelines/generic-runner?title=certificate-localhost-dp' target='_blank'>Platform Provisioner</a>"
  - name: "Install Nginx Ingress"
    type: boolean
    guiType: checkbox
    reference: "meta.guiEnv.GUI_DP_INSTALL_NGINX_INGRESS"
  - name: "Install Traefik Ingress"
    type: boolean
    guiType: checkbox
    reference: "meta.guiEnv.GUI_DP_INSTALL_TRAEFIK_INGRESS"
    description: "Traefik dashboard will be available at: https://dashboard.localhost.dataplanes.pro/dashboard/#/"
  - name: "GUI_PIPELINE_LOG_DEBUG"
    type: boolean
    guiType: checkbox
    reference: "meta.guiEnv.GUI_PIPELINE_LOG_DEBUG"
recipe: |
  apiVersion: v1
  kind: helm-install
  meta:
    guiEnv:
      note: "deploy-dp-on-prem-cert"
      GUI_DP_INSTALL_NGINX_INGRESS: true
      GUI_DP_INSTALL_TRAEFIK_INGRESS: false
      GUI_DP_DOMAIN: "localhost.dataplanes.pro"
      GUI_PIPELINE_LOG_DEBUG: false
      GUI_DP_TLS_CERT: ""
      GUI_DP_TLS_KEY: ""
    globalEnvVariable:
      REPLACE_RECIPE: true
      PIPELINE_LOG_DEBUG: ${GUI_PIPELINE_LOG_DEBUG}
      PIPELINE_CHECK_DOCKER_STATUS: false
      DP_DOMAIN: ${GUI_DP_DOMAIN}
      DP_CLUSTER_NAME: on-prem
      DP_INSTALL_NGINX_INGRESS: ${GUI_DP_INSTALL_NGINX_INGRESS}
      DP_INSTALL_TRAEFIK_INGRESS: ${GUI_DP_INSTALL_TRAEFIK_INGRESS}
      DP_TLS_CERT: ${GUI_DP_TLS_CERT}
      DP_TLS_KEY: ${GUI_DP_TLS_KEY}
      DP_INGRESS_NAMESPACE: ingress-system
    tools:
      yq: "4.40"
      helm: "3.13"
  helmCharts:
    - condition: true
      name: cert-manager
      version: v1.13.2 # release: https://github.com/cert-manager/cert-manager/releases
      repo:
        helm:
          url: https://charts.jetstack.io
      values:
        keepPrevious: true
        content: |
          installCRDs: true
          serviceAccount:
            create: true
            name: cert-manager
      cluster:
        names:
          - ${DP_CLUSTER_NAME}
      releaseName: cert-manager
      namespace: cert-manager
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - condition: false
      name: external-dns
      version: 1.13.1
      repo:
        helm:
          url: https://kubernetes-sigs.github.io/external-dns/
      values:
        keepPrevious: true
        content: |
          serviceAccount:
            create: true
            name: external-dns
      cluster:
        names:
          - ${DP_CLUSTER_NAME}
      releaseName: external-dns
      namespace: external-dns-system
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - condition: true
      name: metrics-server
      version: "3.12.0"
      repo:
        helm:
          url: https://kubernetes-sigs.github.io/metrics-server/
      values:
        keepPrevious: true
        content: |
          clusterName: ${DP_CLUSTER_NAME}
          serviceAccount:
            create: true
            name: metrics-server
          args:
            - "--kubelet-insecure-tls" # https://github.com/docker/for-mac/issues/6274#issuecomment-1259624307
            - "--metric-resolution=90s"
      cluster:
        names:
          - ${DP_CLUSTER_NAME}
      releaseName: metrics-server
      namespace: kube-system
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - condition: ${DP_INSTALL_TRAEFIK_INGRESS}
      name: traefik
      namespace: ${DP_INGRESS_NAMESPACE}
      version: "26.1.0"
      repo:
        helm:
          url: https://traefik.github.io/charts
      values:
        content: |
          # traefik doc: https://doc.traefik.io/traefik/
          # release: https://github.com/traefik/traefik-helm-chart/releases
          # chart values: https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
          hub: # for hub
            enabled: true
          service: # for external-dns
            annotations:
              external-dns.alpha.kubernetes.io/hostname: dashboard.${DP_DOMAIN}
          ingressRoute: # for dashboard http://dashboard.localhost/dashboard/#/
            dashboard:
              matchRule: Host(`dashboard.${DP_DOMAIN}`) && PathPrefix(`/dashboard`) || Host(`dashboard.${DP_DOMAIN}`) && PathPrefix(`/api`)
              entryPoints:
                - traefik
                - web
                - websecure
          providers: # for external service
            kubernetesIngress:
              allowExternalNameServices: true
          additionalArguments:
            - '--serversTransport.insecureSkipVerify=true'
          tlsStore: # for default certificate
            default:
              defaultCertificate:
                secretName: default-certificate
      cluster:
        names:
          - ${DP_CLUSTER_NAME}
      releaseName: traefik
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
      hooks:
        preDeploy:
          ignoreErrors: false
          base64Encoded: false
          skip: false
          content: |
            kubectl create ns ${DP_INGRESS_NAMESPACE}
            kubectl apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: default-certificate
              namespace: ${DP_INGRESS_NAMESPACE}
            type: Opaque
            data:
              tls.crt: ${DP_TLS_CERT}
              tls.key: ${DP_TLS_KEY}
            EOF
    - condition: ${DP_INSTALL_NGINX_INGRESS}
      name: ingress-nginx
      namespace: ${DP_INGRESS_NAMESPACE}
      version: 4.10.0 # release: https://github.com/kubernetes/ingress-nginx/releases
      repo:
        helm:
          url: https://kubernetes.github.io/ingress-nginx
      values:
        keepPrevious: true
        content: |
          # ingress-nginx doc: https://docs.nginx.com/nginx-ingress-controller/
          # ingress-nginx chart values: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
          controller:
            allowSnippetAnnotations: true # https://github.com/kubernetes/ingress-nginx/pull/10393
            service:
              type: LoadBalancer
            ingressClass:
              - nginx
            extraArgs:
              default-ssl-certificate: ${DP_INGRESS_NAMESPACE}/default-certificate
      cluster:
        names:
          - dp-cluster
      releaseName: ingress-nginx
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
      hooks:
        preDeploy:
          ignoreErrors: false
          base64Encoded: false
          skip: false
          content: |
            kubectl create ns ${DP_INGRESS_NAMESPACE}
            kubectl apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: default-certificate
              namespace: ${DP_INGRESS_NAMESPACE}
            type: Opaque
            data:
              tls.crt: ${DP_TLS_CERT}
              tls.key: ${DP_TLS_KEY}
            EOF
