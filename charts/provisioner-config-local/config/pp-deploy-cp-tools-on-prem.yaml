#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

pipelineName: "Deploy Control Plane On-Prem Stack"
description: |
  This pipeline will deploy supporting tools for CP on-prem use case.
  Currently it is tested for kind environment. We have to use github token to access the dev helm charts.
  After the deployment, you will get an email in MailDev to reset the password.
  You need to use port-forward to access MailDev. 
  ```bash
  kubectl port-forward svc/development-mailserver -n tibco-ext 1080:1080
  ```
  Then you can access MailDev at `http://localhost:1080`
options:
- name: "GUI_CP_DNS_DOMAIN"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_CP_DNS_DOMAIN"
  description: "The CP DNS domain"
- name: "GUI_CP_STORAGE_CLASS"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_CP_STORAGE_CLASS"
  description: "hostpath for docker for mac, standard for minikube and kind, microk8s-hostpath for microk8s"
- name: "GUI_CP_INGRESS_SERVICE_TYPE"
  labels:
    - "ClusterIP"
    - "LoadBalancer"
    - "NodePort"
    - "hostPort"
  values:
    - "ClusterIP"
    - "LoadBalancer"
    - "NodePort"
    - "hostPort"
  type: string
  guiType: radio
  reference: "meta.guiEnv.GUI_CP_INGRESS_SERVICE_TYPE"
- name: "GUI_CP_INGRESS_USE_HOSTPORT"
  type: boolean
  guiType: checkbox
  reference: "meta.guiEnv.GUI_CP_INGRESS_USE_HOSTPORT"
  description: "When deploy on kid we need to use hostport for ingress controller"
recipe: |
  apiVersion: v1
  kind: helm-install
  meta:
    guiEnv:
      note: "deploy-cp-on-prem"
      # env
      GUI_CP_DNS_DOMAIN: localhost.dataplanes.pro
      GUI_CP_INGRESS_SERVICE_TYPE: ClusterIP
      GUI_CP_INGRESS_USE_HOSTPORT: false
      GUI_CP_STORAGE_CLASS: standard
    globalEnvVariable:
      REPLACE_RECIPE: true
      PIPELINE_LOG_DEBUG: false
      PIPELINE_CHECK_DOCKER_STATUS: false
      # env
      CP_CLUSTER_NAME: ${GUI_CP_CLUSTER_NAME:-"cp-cluster"}
      # domain
      CP_INSTALL_NGINX_INGRESS: true
      CP_INGRESS_NAMESPACE: ingress-system
      CP_DNS_DOMAIN: ${GUI_CP_DNS_DOMAIN:-localhost.dataplanes.pro}
      CP_INGRESS_SERVICE_TYPE: ${GUI_CP_INGRESS_SERVICE_TYPE:-ClusterIP} # LoadBalancer, NodePort, ClusterIP
      CP_INGRESS_USE_HOSTPORT: ${GUI_CP_INGRESS_USE_HOSTPORT:-false} # true for kind
      # storage
      CP_STORAGE_CLASS: ${GUI_CP_STORAGE_CLASS:-"standard"} # hostpath for docker for mac, standard for minikube and kind, microk8s-hostpath for microk8s
      # third party
      CP_EXT_NAMESPACE: tibco-ext
      # CP DB setup env
      CP_INSTALL_POSTGRES: true
      CP_DB_USER_NAME: ${GUI_CP_DB_USER_NAME:-"postgres"} # CP_RDS_USERNAME in create-rds.sh
      CP_DB_PASSWORD: ${GUI_CP_DB_PASSWORD:-"postgres"} # CP_RDS_MASTER_PASSWORD in create-rds.sh
      CP_DB_NAME: postgres
      CP_DB_SECRET_NAME: provider-cp-database-credentials # not used
      # flow control
      CP_INSTALL_CERT_MANAGER: true
      CP_INSTALL_METRICS_SERVER: true
    tools:
      yq: "4.40"
      helm: "3.13"
      kubectl: "1.28"
  helmCharts:
    - condition: ${CP_INSTALL_CERT_MANAGER}
      name: cert-manager
      version: v1.13.2 # release: https://github.com/cert-manager/cert-manager/releases
      repo:
        helm:
          url: https://charts.jetstack.io
      values:
        keepPrevious: true
        content: |
          installCRDs: true
          serviceAccount:
            create: true
            name: cert-manager
      cluster:
        names:
          - ${CP_CLUSTER_NAME}
      releaseName: cert-manager
      namespace: cert-manager
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - condition: ${CP_INSTALL_METRICS_SERVER}
      name: metrics-server
      version: "3.12.0"
      repo:
        helm:
          url: https://kubernetes-sigs.github.io/metrics-server/
      values:
        keepPrevious: true
        content: |
          clusterName: ${CP_CLUSTER_NAME}
          serviceAccount:
            create: true
            name: metrics-server
          args:
            - "--kubelet-insecure-tls" # https://github.com/docker/for-mac/issues/6274#issuecomment-1259624307
            - "--metric-resolution=90s"
      cluster:
        names:
          - ${CP_CLUSTER_NAME}
      releaseName: metrics-server
      namespace: kube-system
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - condition: ${CP_INSTALL_NGINX_INGRESS}
      name: ingress-nginx
      namespace: ${CP_INGRESS_NAMESPACE}
      version: 4.10.0 # release: https://github.com/kubernetes/ingress-nginx/releases
      repo:
        helm:
          url: https://kubernetes.github.io/ingress-nginx
      values:
        keepPrevious: true
        content: |
          # ingress-nginx doc: https://docs.nginx.com/nginx-ingress-controller/
          # ingress-nginx chart values: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
          controller:
            allowSnippetAnnotations: true # https://github.com/kubernetes/ingress-nginx/pull/10393
            hostPort:
              enabled: ${CP_INGRESS_USE_HOSTPORT} # true for kind
            service:
              type: ${CP_INGRESS_SERVICE_TYPE} # NodePort for kind, LoadBalancer for others
            ingressClass:
              - nginx
      cluster:
        names:
          - ${CP_CLUSTER_NAME}
      releaseName: ingress-nginx
      flags:
        wait: true
        timeout: 1h
        createNamespace: true
    - name: postgresql
      version: 11.9.13 # 14.3.3 use postgresql 16.2.0, 11.9.13 use postgresql 14.5.0 PCP-4922
      namespace: ${CP_EXT_NAMESPACE}
      releaseName: postgresql
      condition: ${CP_INSTALL_POSTGRES}
      repo:
        helm:
          url: https://charts.bitnami.com/bitnami
      cluster:
        names:
          - ${CP_CLUSTER_NAME}
      values:
        keepPrevious: true
        content: |
          auth:
            postgresPassword: ${CP_DB_PASSWORD}
            username: ${CP_DB_USER_NAME}
            password: ${CP_DB_PASSWORD}
            database: "${CP_DB_NAME}"
          persistence:
            storageClass: ${CP_STORAGE_CLASS}
      flags:
        createNamespace: true
        timeout: 1h
